
# coding: utf-8

# In[4]:
#sonika
import sys
import os
import argparse
import re

def usage():
    print('Usage\nInput: <base directory> <-ci color to be used if at least one joint at the end of an edge is inferred> <-ct color to be used if both joints at the ends of an edge are inferred> <-cm color to be used for skeleton generated by m/c learning>\nOutputs output.avi and output.csv in the respective folders')
if(len(sys.argv)<2 or len(sys.argv)>8):
    usage()
    exit()
    
parser = argparse.ArgumentParser()
parser.add_argument("-j1", "--directory", help="directory containing all subject names")
parser.add_argument("-n", "--no_skel", default=0, help="flag indicating whether or not skeleton is to be superimposed on output: 1=create color_new avi with revised fps; 0=superimpose skeleton")
parser.add_argument("-ci", "--color_inferred", default="green", help='color to be used if at least one joint at the end is inferred; can be specified either as one of red, blue, green, yellow, white or as an rgb triplet (x,x,x)')
parser.add_argument("-ct", "--color_tracked", default="red", help='color to be used if both joints at the end are tracked; can be specified either as one of red, blue, green, yellow, white or as an rgb triplet (x,x,x)')
#parser.add_argument("-cm", "--color_ml", default="white", help='color to be used for skeleton generated by machine learning; can be specified either as one of red, blue, green, yellow, white or as an rgb triplet (x,x,x)')
args = parser.parse_args()

list_of_subjects = os.listdir(args.directory)
for subject in list_of_subjects:
    subj_path = args.directory+"\\"+subject
    list_of_aasanas = os.listdir(subj_path)
    for aasana in list_of_aasanas:
        aasana_path = subj_path+"\\"+aasana
        print(aasana_path)
        #cmd = "python skeleton.py -r "+aasana_path+"\\color.avi -b rgb -o "+aasana_path+"\\output.avi -oc "+aasana_path+"\\output.csv -st 1 "+"-ci "+args.color_inferred+" -ct "+args.color_tracked+" -cm "+args.color_ml+" -f 1 "+" -j1 "+aasana_path+"\\joints.csv "+"-j2 "+aasana_path+"\\joints_new.csv"
        #cmd = "python skeleton.py -n "+str(args.no_skel)+" -r "+aasana_path+"\\color.avi -nr "+aasana_path+"\\color_new.avi -b rgb -o "+aasana_path+"\\output.avi -oc "+aasana_path+"\\output.csv -st 1 "+"-ci "+args.color_inferred+" -ct "+args.color_tracked+" -j1 "+aasana_path+"\\joints.csv "
        cmd = "python skeleton.py -n "+str(args.no_skel)+" -r "+aasana_path+"/color.avi -nr "+aasana_path+"/color_new.avi -b rgb -o "+aasana_path+"/output.avi -oc "+aasana_path+"/output.csv -st 1 "+"-ci "+args.color_inferred+" -ct "+args.color_tracked+" -j1 "+aasana_path+"/joints.csv "
        os.system(cmd)
  
  
"""
parser = argparse.ArgumentParser(description='Smoothen the joint movements and output them as video and a csv file')
parser.add_argument("in_csv", help="file containing the joints")
parser.add_argument("-r", "--rgb-vid", default="colors.avi", help='name of the rgb video')
parser.add_argument("-d", "--depth-vid", default="depth.avi", help='name of the depth video')
parser.add_argument("-b", "--background", choices=['rgb', 'depth', 'none'], default='none',help="Background on which the \
	skeleton will be superimposed(default: none)")
parser.add_argument("-o", "--out-vid", default='output.avi', help='name of output video')
parser.add_argument("-oc", "--out-csv", default='output.csv', help='name of output csv file')
parser.add_argument("-st", "--start-frame", type=int, default=1, help='frame number to start from')
parser.add_argument("-end", "--end-frame", type=int, default=-1, help='frame number to end at')
parser.add_argument("-m", "--median", type=float, default=2, help='window size for the median filter(in seconds)')
parser.add_argument("-exp", "--exponential", type=float, default=0.5, help='half life for the exponential filter(in seconds)')
args = parser.parse_args()

process_video(args.in_csv, args.rgb_vid, args.depth_vid, args.background, args.out_vid, args.out_csv,
	args.start_frame, args.end_frame, args.median, args.exponential)"""

